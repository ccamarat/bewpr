{"version":3,"file":"bewpr.js","sources":["../src/enums.js","../src/HeartbeatMonitor.js","../src/Serializer.js","../src/Socket.js","../src/Host.js","../src/HeartbeatProvider.js","../src/Guest.js"],"sourcesContent":["export const DEFAULT_HEALTH_CHECK_INTERVAL = 1000;\r\nexport const DEFAULT_HEALTH_CHECK_TIMEOUT = 5000;\r\nexport const DEFAULT_TIMEOUT = 5000;\r\n\r\n/**\r\n * Possible message types sent/recv'd by a socket\r\n * @type {{DATA: string, START: string, HEARTBEAT: string}}\r\n */\r\nexport const MESSAGE_TYPES = {\r\n    DATA: 'data',\r\n    START: 'start',\r\n    ACK: 'ack',\r\n    HEARTBEAT: 'heartbeat'\r\n};\r\n","import {DEFAULT_HEALTH_CHECK_INTERVAL, DEFAULT_HEALTH_CHECK_TIMEOUT} from './enums';\r\n\r\nexport class HeartbeatMonitor {\r\n    constructor (host, sockets) {\r\n        this._lasthealthPoll = Date.now();\r\n        this._host = host;\r\n        this._sockets = sockets;\r\n        this._timerId = null;\r\n    }\r\n\r\n    /**\r\n     * starts monitoring the sockets array (if it's not already doing so)\r\n     */\r\n    start () {\r\n        if (!this._timerId) {\r\n            this._monitor();\r\n        }\r\n    }\r\n\r\n    _monitor () {\r\n        // indicates whether any active sockets were found. Used to optionally stop monitoring.\r\n        let hasActiveSockets = false;\r\n\r\n        // loop through the socket array and make sure everyone's playing nice.\r\n        this._sockets.forEach((socket) => {\r\n            if (!socket) {\r\n                return;\r\n            }\r\n\r\n            // Indicate that someone's alive\r\n            hasActiveSockets = true;\r\n\r\n            // Close any sockets who'se peers have disappeared into the ether.\r\n            if (socket.isStarted && this._lasthealthPoll - socket.lastPeerCheckin > DEFAULT_HEALTH_CHECK_TIMEOUT) {\r\n                this._host.close(socket);\r\n            }\r\n        });\r\n\r\n        // Update\r\n        this._lasthealthPoll = Date.now();\r\n\r\n        // If nobody's around, stop paying attention\r\n        if (!hasActiveSockets) {\r\n            this.stop();\r\n        }\r\n\r\n        this._timerId = window.setTimeout(this._monitor.bind(this), DEFAULT_HEALTH_CHECK_INTERVAL);\r\n    }\r\n\r\n    /**\r\n     * Stops monitoring the sockets array.\r\n     */\r\n    stop () {\r\n        if (this._timerId) {\r\n            window.clearTimeout(this._timerId);\r\n            this._timerId = null;\r\n        }\r\n    }\r\n}\r\n","export const Serializer = {\r\n    serialize: JSON.stringify,\r\n    deserialize: JSON.parse\r\n};\r\n","import {Serializer} from './Serializer';\r\nimport {MESSAGE_TYPES, DEFAULT_TIMEOUT} from './enums';\r\n\r\nconst makeId = () => Date.now() + Math.random();\r\n\r\nclass MessageQueue {\r\n    constructor() {\r\n        this._items = {};\r\n    }\r\n\r\n    add(resolver) {\r\n        const id = makeId();\r\n\r\n        this._items[id] = resolver;\r\n\r\n        return id;\r\n    }\r\n\r\n    acknowledge(id) {\r\n        clearTimeout(this._items[id].timerId);\r\n        this._items[id].resolve();\r\n        delete this._items[id];\r\n    }\r\n\r\n    fail(id) {\r\n        this._items[id].reject();\r\n        delete this._items[id];\r\n    }\r\n}\r\n\r\nconst noop = () => {\r\n    // No op function intentionally left blank.\r\n};\r\n\r\n/**\r\n * The socket is the primary means a client communicates with a peer server.\r\n */\r\nexport class Socket {\r\n\r\n    /**\r\n     * Creates a socket instance.\r\n     * @param id - this instance's id. Used to locate it when message is received.\r\n     * @param target - the socket's communication target.\r\n     * @param peerId - The id of the peer socket.\r\n     */\r\n    constructor(id, target, peerId) {\r\n        this.messages = new MessageQueue();\r\n\r\n        this.id = id;\r\n\r\n        this.peerId = peerId;\r\n\r\n        this.target = target;\r\n\r\n        // For health monitoring - indicate the last time the peer checked in telling us it's alive\r\n        this.lastPeerCheckin = 0;\r\n\r\n        // Indicates whether the peer has started\r\n        this.isStarted = false;\r\n    }\r\n\r\n    /**\r\n     * will send a message to the socket's peer\r\n     * @param message - message to send\r\n     * @param type - type of message to send. Defaults to \"DATA\"\r\n     */\r\n    send(message, type = MESSAGE_TYPES.DATA) {\r\n        if (type === MESSAGE_TYPES.START) {\r\n            this.isStarted = true;\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const resolver = {\r\n                resolve,\r\n                reject\r\n            };\r\n\r\n            resolver.messageId = this.messages.add(resolver);\r\n            resolver.timerId = window.setTimeout(() => {\r\n                this._timeoutCount += 1;\r\n                reject(new Error('TIMEOUT'));\r\n            }, DEFAULT_TIMEOUT);\r\n\r\n            const packet = {\r\n                sourceId: this.id,\r\n                targetId: this.peerId,\r\n                messageId: resolver.messageId,\r\n                message,\r\n                type\r\n            };\r\n\r\n            this.target.postMessage(Serializer.serialize(packet), '*');\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Acknowledges a message.\r\n     * @param messageId message ID to ack.\r\n     */\r\n    ack(messageId) {\r\n        const packet = {\r\n            sourceId: this.id,\r\n            targetId: this.peerId,\r\n            messageId,\r\n            message: '',\r\n            type: MESSAGE_TYPES.ACK\r\n        };\r\n\r\n        this.target.postMessage(Serializer.serialize(packet), '*');\r\n    }\r\n\r\n    /**\r\n     * Closes the socket. Also triggers the \"onClose\" callback if supplied.\r\n     */\r\n    close() {\r\n        this.onClose && this.onClose();\r\n    }\r\n\r\n    /**\r\n     * Handles a deserialized packet from a peer.\r\n     * @param packet packet to handle\r\n     */\r\n    handle(packet) {\r\n        this.lastPeerCheckin = Date.now();\r\n\r\n        switch (packet.type) {\r\n            case MESSAGE_TYPES.START:\r\n                this.onStart && this.onStart();\r\n                this.isStarted = true;\r\n                break;\r\n            case MESSAGE_TYPES.ACK:\r\n                this.messages.acknowledge(packet.messageId);\r\n                break;\r\n            case MESSAGE_TYPES.HEARTBEAT:\r\n                break;\r\n            default:\r\n                this.onMessage && this.onMessage(packet.message);\r\n        }\r\n\r\n        // Acknowledge all messages.\r\n        if (packet.type !== MESSAGE_TYPES.ACK) {\r\n            this.ack(packet.messageId);\r\n        }\r\n    }\r\n}\r\n","import {HeartbeatMonitor} from './HeartbeatMonitor';\r\nimport {Serializer} from './Serializer';\r\nimport {Socket} from './Socket';\r\nimport {DEFAULT_TIMEOUT} from './enums';\r\n\r\nexport class Host {\r\n    constructor () {\r\n        this._sockets = [];\r\n        // Listen for postMessage events\r\n        window.addEventListener('message', this._onMessage.bind(this), false);\r\n\r\n        // Create the health monitor\r\n        this._healthMonitor = new HeartbeatMonitor(this, this._sockets);\r\n    }\r\n\r\n    _onMessage (message) {\r\n        const packet = Serializer.deserialize(message.data);\r\n        const socket = this._sockets[packet.targetId];\r\n\r\n        // verify the socket reference\r\n        if (!socket) {\r\n            // probably what happened is the user refreshed the client page and the server's\r\n            // still sending messages. Not much we can do but ignore it. The server should clean\r\n            // itself up eventually.\r\n            return;\r\n        }\r\n\r\n        socket.handle(packet);\r\n    }\r\n\r\n    /**\r\n     * creates a guest session by opening a new window and passing that reference to a socket instance,\r\n     * then returns the socket\r\n     * @param options\r\n     * @returns {Socket}\r\n     */\r\n    create (options) {\r\n        // the socket id is simply the next available slot in the sockets array\r\n        const socketId = this._sockets.length;\r\n\r\n        // The 'endpoint' is the target window\r\n        const endpoint = window.open(options.target, socketId.toString(), options.windowOptions);\r\n\r\n        // new up a socket and store it in our socket's array\r\n        const socket = new Socket(socketId, endpoint);\r\n\r\n        this._sockets.push(socket);\r\n\r\n        // ensure socket monitoring is active (it stops polling when all sockets are closed)\r\n        this._healthMonitor.start();\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const timerId = setTimeout(() => {\r\n                socket.close();\r\n                reject(new Error('TIMEOUT'));\r\n            }, DEFAULT_TIMEOUT);\r\n\r\n            socket.onStart = () => {\r\n                clearTimeout(timerId);\r\n                resolve(socket);\r\n            };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Close the socket, which renders it pretty much useless.\r\n     * @param socket\r\n     */\r\n    close (socket) {\r\n        if (socket.target) {\r\n            socket.target.close();\r\n        }\r\n        socket.close();\r\n        this._sockets[socket.id] = null;\r\n    }\r\n\r\n    /**\r\n     * shuts down the host.\r\n     */\r\n    shutdown () {\r\n        for (let ix = 0; ix < this._sockets.length; ix++) {\r\n            this.close(this._sockets[ix]);\r\n        }\r\n        this._sockets.length = 0;\r\n    }\r\n}\r\n","import {DEFAULT_HEALTH_CHECK_INTERVAL, MESSAGE_TYPES} from './enums';\r\n\r\n/**\r\n * HeartbeatProvider; includes automatic heartbeat.\r\n */\r\nexport class HeartbeatProvider {\r\n    constructor (socket) {\r\n        this._socket = socket;\r\n    }\r\n\r\n    /**\r\n     * Signals that the socket is configured and can start reporting heartbeats.\r\n     */\r\n    start () {\r\n        this._socket.send('', MESSAGE_TYPES.START);\r\n        this._sendHeartbeat();\r\n    }\r\n\r\n    _sendHeartbeat () {\r\n        this._socket.send('', MESSAGE_TYPES.HEARTBEAT);\r\n\r\n        window.setTimeout(this._sendHeartbeat.bind(this), DEFAULT_HEALTH_CHECK_INTERVAL);\r\n    }\r\n}\r\n","import {Serializer} from './Serializer';\r\nimport {Socket} from './Socket';\r\nimport {HeartbeatProvider} from './HeartbeatProvider';\r\nimport {HeartbeatMonitor} from './HeartbeatMonitor';\r\n\r\nconst DEFAULT_SERVER_SOCKET_ID = 0;\r\n\r\n/**\r\n * The \"Guest\" is launched by the host. Typically hosts control guests, but guests can send messages to the host as\r\n * well.\r\n */\r\nexport class Guest {\r\n\r\n    /**\r\n     * Signals that the guest has been configured and is ready to send / receive messages\r\n     */\r\n    start () {\r\n        this._socket = new Socket(DEFAULT_SERVER_SOCKET_ID, window.opener || window.top, parseInt(window.name, 10));\r\n\r\n        this._healthMonitor = new HeartbeatMonitor(this, [this._socket]);\r\n\r\n        this._socket.onMessage = (...args) => {\r\n            this.onReceiveMessage && this.onReceiveMessage(...args);\r\n        };\r\n\r\n        window.addEventListener('message', this._onMessage.bind(this), false);\r\n\r\n        const heartbeat = new HeartbeatProvider(this._socket);\r\n\r\n        // Setup an event to notify the client that we're ready to send messages\r\n        window.addEventListener('load', () => {\r\n            heartbeat.start();\r\n        }, false);\r\n\r\n        // ensure socket monitoring is active\r\n        this._healthMonitor.start();\r\n    }\r\n\r\n    _onMessage (message) {\r\n        // On page reloads when the parent window is closed, postMessage sends to itself.\r\n        if (message.source === window) {\r\n            return;\r\n        }\r\n        const packet = Serializer.deserialize(message.data);\r\n\r\n        this._socket.handle(packet);\r\n    }\r\n\r\n    /**\r\n     * Sends a message to the host.\r\n     * @param message\r\n     */\r\n    sendMessage (message) {\r\n        this._socket.send(message);\r\n    }\r\n\r\n    /**\r\n     * Closes the guest window!\r\n     */\r\n    close () {\r\n        window.close();\r\n    }\r\n\r\n    /**\r\n     * Lookup the Host's peer ID. Useful for debugging but not much else.\r\n     * @returns {*}\r\n     */\r\n    get id () {\r\n        return this._socket.peerId;\r\n    }\r\n}\r\n"],"names":["DEFAULT_HEALTH_CHECK_INTERVAL","DEFAULT_HEALTH_CHECK_TIMEOUT","DEFAULT_TIMEOUT","MESSAGE_TYPES","HeartbeatMonitor","host","sockets","_lasthealthPoll","Date","now","_host","_sockets","_timerId","_monitor","hasActiveSockets","forEach","socket","isStarted","lastPeerCheckin","close","stop","window","setTimeout","bind","clearTimeout","Serializer","JSON","stringify","parse","makeId","Math","random","MessageQueue","_items","resolver","id","timerId","resolve","reject","Socket","target","peerId","messages","message","type","DATA","START","Promise","messageId","add","_timeoutCount","Error","packet","postMessage","serialize","ACK","onClose","onStart","acknowledge","HEARTBEAT","onMessage","ack","Host","addEventListener","_onMessage","_healthMonitor","deserialize","data","targetId","handle","options","socketId","length","endpoint","open","toString","windowOptions","push","start","ix","HeartbeatProvider","_socket","send","_sendHeartbeat","DEFAULT_SERVER_SOCKET_ID","Guest","opener","top","parseInt","name","onReceiveMessage","heartbeat","source"],"mappings":"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"}