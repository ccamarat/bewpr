{"version":3,"file":"bewpr.js","sources":["../src/enums.js","../src/HeartbeatMonitor.js","../src/Serializer.js","../src/Socket.js","../src/Host.js","../src/HeartbeatProvider.js","../src/Guest.js"],"sourcesContent":["export const DEFAULT_HEALTH_CHECK_INTERVAL = 1000;\r\nexport const DEFAULT_HEALTH_CHECK_TIMEOUT = 5000;\r\n\r\n/**\r\n * Possible message types sent/recv'd by a socket\r\n * @type {{DATA: string, START: string, HEARTBEAT: string}}\r\n */\r\nexport const MESSAGE_TYPES = {\r\n    DATA: 'data',\r\n    START: 'start',\r\n    HEARTBEAT: 'heartbeat'\r\n};\r\n","import {DEFAULT_HEALTH_CHECK_INTERVAL, DEFAULT_HEALTH_CHECK_TIMEOUT} from './enums';\r\n\r\nexport class HeartbeatMonitor {\r\n    constructor (host, sockets) {\r\n        this._lasthealthPoll = Date.now();\r\n        this._host = host;\r\n        this._sockets = sockets;\r\n        this._timerId = null;\r\n    }\r\n\r\n    /**\r\n     * starts monitoring the sockets array (if it's not already doing so)\r\n     */\r\n    start () {\r\n        if (!this._timerId) {\r\n            this._monitor();\r\n        }\r\n    }\r\n\r\n    _monitor () {\r\n        // indicates whether any active sockets were found. Used to optionally stop monitoring.\r\n        let hasActiveSockets = false;\r\n\r\n        // loop through the socket array and make sure everyone's playing nice.\r\n        this._sockets.forEach((socket) => {\r\n            if (!socket) {\r\n                return;\r\n            }\r\n\r\n            // Indicate that someone's alive\r\n            hasActiveSockets = true;\r\n\r\n            // Close any sockets who'se peers have disappeared into the ether.\r\n            if (socket.isStarted && this._lasthealthPoll - socket.lastPeerCheckin > DEFAULT_HEALTH_CHECK_TIMEOUT) {\r\n                this._host.close(socket);\r\n            }\r\n        });\r\n\r\n        // Update\r\n        this._lasthealthPoll = Date.now();\r\n\r\n        // If nobody's around, stop paying attention\r\n        if (!hasActiveSockets) {\r\n            this.stop();\r\n        }\r\n\r\n        this._timerId = window.setTimeout(this._monitor.bind(this), DEFAULT_HEALTH_CHECK_INTERVAL);\r\n    }\r\n\r\n    /**\r\n     * Stops monitoring the sockets array.\r\n     */\r\n    stop () {\r\n        if (this._timerId) {\r\n            window.clearTimeout(this._timerId);\r\n            this._timerId = null;\r\n        }\r\n    }\r\n}\r\n","export class Serializer {\r\n\r\n    /**\r\n     * Turns a message into a packet containing information about the message's type and route.\r\n     * @param sourceId - ID of socket sending the message\r\n     * @param targetId - Target Socket ID sending the message\r\n     * @param message - Message to send\r\n     * @param type - Type of message\r\n     */\r\n    static serialize (sourceId, targetId, message, type) {\r\n        const payload = JSON.stringify(message);\r\n\r\n        if (!payload) {\r\n            throw new Error(`cannot serialize '${message}'`);\r\n        }\r\n\r\n        const packet = {\r\n            type,\r\n            sourceId,\r\n            targetId,\r\n            payload\r\n        };\r\n\r\n        return JSON.stringify(packet);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param message\r\n     * @returns {{sourceId: *, targetId: (number|*), message: *, type: *}}\r\n     */\r\n    static deserialize (message) {\r\n        const packet = JSON.parse(message);\r\n\r\n        return {\r\n            sourceId: packet.sourceId,\r\n            targetId: packet.targetId,\r\n            message: JSON.parse(packet.payload),\r\n            type: packet.type\r\n        };\r\n    }\r\n}\r\n","import {Serializer} from './Serializer';\r\nimport {MESSAGE_TYPES} from './enums';\r\n\r\n/**\r\n * The socket is the primary means a client communicates with a peer server.\r\n */\r\nexport class Socket {\r\n\r\n    /**\r\n     * Creates a socket instance.\r\n     * @param id - this instance's id. Used to locate it when message is received.\r\n     * @param target - the socket's communication target.\r\n     * @param peerId - The id of the peer socket.\r\n     */\r\n    constructor (id, target, peerId) {\r\n        this.id = id;\r\n\r\n        this.peerId = peerId;\r\n\r\n        this.target = target;\r\n\r\n        // For health monitoring - indicate the last time the peer checked in telling us it's alive\r\n        this.lastPeerCheckin = 0;\r\n\r\n        // Indicates whether the peer has started\r\n        this.isStarted = false;\r\n    }\r\n\r\n    /**\r\n     * will send a message to the socket's peer\r\n     * @param message - message to send\r\n     * @param type - type of message to send. Defaults to \"DATA\"\r\n     */\r\n    send (message, type = MESSAGE_TYPES.DATA) {\r\n        this.target.postMessage(Serializer.serialize(this.id, this.peerId, message, type), '*');\r\n    }\r\n\r\n    /**\r\n     * Closes the socket. Also triggers the \"onClose\" callback if supplied.\r\n     */\r\n    close () {\r\n        this.onClose && this.onClose();\r\n    }\r\n\r\n    /**\r\n     * Handles a deserialized packet from a peer.\r\n     * @param packet packet to handle\r\n     */\r\n    handle (packet) {\r\n        this.lastPeerCheckin = Date.now();\r\n\r\n        switch (packet.type) {\r\n            case MESSAGE_TYPES.START:\r\n                this.isStarted = true;\r\n                this.onStart && this.onStart();\r\n                break;\r\n            case MESSAGE_TYPES.HEARTBEAT:\r\n                break;\r\n            default:\r\n                this.onMessage && this.onMessage(packet.message);\r\n        }\r\n    }\r\n}\r\n","import {HeartbeatMonitor} from './HeartbeatMonitor';\r\nimport {Serializer} from './Serializer';\r\nimport {Socket} from './Socket';\r\n\r\nexport class Host {\r\n    constructor () {\r\n        this._sockets = [];\r\n    }\r\n\r\n    /**\r\n     * Signal that the host has been configured and is ready to start creating guests.\r\n     */\r\n    start () {\r\n        // Listen for postMessage events\r\n        window.addEventListener('message', this._onMessage.bind(this), false);\r\n\r\n        // Create the health monitor\r\n        this._healthMonitor = new HeartbeatMonitor(this, this._sockets);\r\n    }\r\n\r\n    _onMessage (message) {\r\n        const packet = Serializer.deserialize(message.data);\r\n        const socket = this._sockets[packet.targetId];\r\n\r\n        // verify the socket reference\r\n        if (!socket) {\r\n            // probably what happened is the user refreshed the client page and the server's\r\n            // still sending messages. Not much we can do but ignore it. The server should clean\r\n            // itself up eventually.\r\n            return;\r\n        }\r\n\r\n        socket.handle(packet);\r\n    }\r\n\r\n    /**\r\n     * creates a guest session by opening a new window and passing that reference to a socket instance,\r\n     * then returns the socket\r\n     * @param options\r\n     * @returns {Socket}\r\n     */\r\n    create (options) {\r\n        // the socket id is simply the next available slot in the sockets array\r\n        const socketId = this._sockets.length;\r\n\r\n        // The 'endpoint' is the target window\r\n        const endpoint = window.open(options.target, socketId.toString(), options.windowOptions);\r\n\r\n        // new up a socket and store it in our socket's array\r\n        const socket = new Socket(socketId, endpoint);\r\n\r\n        this._sockets.push(socket);\r\n\r\n        // ensure socket monitoring is active\r\n        this._healthMonitor.start();\r\n\r\n        // give the people what they ask for\r\n        return socket;\r\n    }\r\n\r\n    /**\r\n     * Close the socket, which renders it pretty much useless.\r\n     * @param socket\r\n     */\r\n    close (socket) {\r\n        if (socket.target) {\r\n            socket.target.close();\r\n        }\r\n        socket.close();\r\n        this._sockets[socket.id] = null;\r\n    }\r\n\r\n    /**\r\n     * shuts down the host.\r\n     */\r\n    shutdown () {\r\n        for (let ix = 0; ix < this._sockets.length; ix++) {\r\n            this.close(this._sockets[ix]);\r\n        }\r\n        this._sockets.length = 0;\r\n    }\r\n}\r\n","import {DEFAULT_HEALTH_CHECK_INTERVAL, MESSAGE_TYPES} from './enums';\r\n\r\n/**\r\n * HeartbeatProvider; includes automatic heartbeat.\r\n */\r\nexport class HeartbeatProvider {\r\n    constructor (socket) {\r\n        this._socket = socket;\r\n    }\r\n\r\n    /**\r\n     * Signals that the socket is configured and can start reporting heartbeats.\r\n     */\r\n    start () {\r\n        this._socket.send('', MESSAGE_TYPES.START);\r\n        this._sendHeartbeat();\r\n    }\r\n\r\n    _sendHeartbeat () {\r\n        this._socket.send('', MESSAGE_TYPES.HEARTBEAT);\r\n\r\n        window.setTimeout(this._sendHeartbeat.bind(this), DEFAULT_HEALTH_CHECK_INTERVAL);\r\n    }\r\n}\r\n","import {Serializer} from './Serializer';\r\nimport {Socket} from './Socket';\r\nimport {HeartbeatProvider} from './HeartbeatProvider';\r\n\r\nconst DEFAULT_SERVER_SOCKET_ID = 0;\r\n\r\n/**\r\n * The \"Guest\" is launched by the host. Typically hosts control guests, but guests can send messages to the host as\r\n * well.\r\n */\r\nexport class Guest {\r\n\r\n    /**\r\n     * Signals that the guest has been configured and is ready to send / receive messages\r\n     */\r\n    start () {\r\n        this._socket = new Socket(DEFAULT_SERVER_SOCKET_ID, window.opener || window.top, parseInt(window.name, 10));\r\n\r\n        this._socket.onMessage = (...args) => {\r\n            this.onReceiveMessage && this.onReceiveMessage(...args);\r\n        };\r\n\r\n        window.addEventListener('message', this._onMessage.bind(this), false);\r\n\r\n        const heartbeat = new HeartbeatProvider(this._socket);\r\n\r\n        // Setup an event to notify the client that we're ready to send messages\r\n        window.addEventListener('load', () => {\r\n            heartbeat.start();\r\n        }, false);\r\n    }\r\n\r\n    _onMessage (message) {\r\n        const packet = Serializer.deserialize(message.data);\r\n\r\n        this._socket.handle(packet);\r\n    }\r\n\r\n    /**\r\n     * Sends a message to the host.\r\n     * @param message\r\n     */\r\n    sendMessage (message) {\r\n        this._socket.send(message);\r\n    }\r\n\r\n    /**\r\n     * Lookup the Host's peer ID. Useful for debugging but not much else.\r\n     * @returns {*}\r\n     */\r\n    get id () {\r\n        return this._socket.peerId;\r\n    }\r\n}\r\n"],"names":["DEFAULT_HEALTH_CHECK_INTERVAL","DEFAULT_HEALTH_CHECK_TIMEOUT","MESSAGE_TYPES","HeartbeatMonitor","host","sockets","_lasthealthPoll","Date","now","_host","_sockets","_timerId","_monitor","hasActiveSockets","forEach","socket","isStarted","lastPeerCheckin","close","stop","window","setTimeout","bind","clearTimeout","Serializer","sourceId","targetId","message","type","payload","JSON","stringify","Error","packet","parse","Socket","id","target","peerId","DATA","postMessage","serialize","onClose","START","onStart","HEARTBEAT","onMessage","Host","addEventListener","_onMessage","_healthMonitor","deserialize","data","handle","options","socketId","length","endpoint","open","toString","windowOptions","push","start","ix","HeartbeatProvider","_socket","send","_sendHeartbeat","DEFAULT_SERVER_SOCKET_ID","Guest","opener","top","parseInt","name","onReceiveMessage","heartbeat"],"mappings":"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"}