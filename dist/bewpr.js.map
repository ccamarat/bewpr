{"version":3,"file":"bewpr.js","sources":["../src/enums.js","../src/HeartbeatMonitor.js","../src/Serializer.js","../src/MessageQueue.js","../src/Socket.js","../src/HostSocket.js","../src/Host.js","../src/HeartbeatProvider.js","../src/Guest.js"],"sourcesContent":["export const DEFAULT_HEALTH_CHECK_INTERVAL = 1000;\r\nexport const DEFAULT_HEALTH_CHECK_TIMEOUT = 5000;\r\nexport const DEFAULT_TIMEOUT = 5000;\r\n\r\n/**\r\n * Possible message types sent/recv'd by a socket\r\n * @type {{DATA: string, START: string, HEARTBEAT: string}}\r\n */\r\nexport const MESSAGE_TYPES = {\r\n  DATA: 'data',\r\n  START: 'start',\r\n  ACK: 'ack',\r\n  HEARTBEAT: 'heartbeat'\r\n};\r\n\r\nexport const isIE = window.ActiveXObject || 'ActiveXObject' in window;\r\n","import { DEFAULT_HEALTH_CHECK_INTERVAL, DEFAULT_HEALTH_CHECK_TIMEOUT } from './enums';\r\n\r\nexport class HeartbeatMonitor {\r\n  constructor (host, sockets) {\r\n    this._lasthealthPoll = Date.now();\r\n    this._host = host;\r\n    this._sockets = sockets;\r\n    this._timerId = null;\r\n  }\r\n\r\n  /**\r\n     * starts monitoring the sockets array (if it's not already doing so)\r\n     */\r\n  start () {\r\n    if (!this._timerId) {\r\n      this._monitor();\r\n    }\r\n  }\r\n\r\n  _monitor () {\r\n    // indicates whether any active sockets were found. Used to optionally stop monitoring.\r\n    let hasActiveSockets = false;\r\n\r\n    // loop through the socket array and make sure everyone's playing nice.\r\n    this._sockets.forEach((socket) => {\r\n      if (!socket) {\r\n        return;\r\n      }\r\n\r\n      // Indicate that someone's alive\r\n      hasActiveSockets = true;\r\n\r\n      // Close any sockets who'se peers have disappeared into the ether.\r\n      if (socket.isStarted && this._lasthealthPoll - socket.lastPeerCheckin > DEFAULT_HEALTH_CHECK_TIMEOUT) {\r\n        this._host.close(socket);\r\n      }\r\n    });\r\n\r\n    // Update\r\n    this._lasthealthPoll = Date.now();\r\n\r\n    // If nobody's around, stop paying attention\r\n    if (!hasActiveSockets) {\r\n      this.stop();\r\n    }\r\n\r\n    this._timerId = window.setTimeout(this._monitor.bind(this), DEFAULT_HEALTH_CHECK_INTERVAL);\r\n  }\r\n\r\n  /**\r\n     * Stops monitoring the sockets array.\r\n     */\r\n  stop () {\r\n    if (this._timerId) {\r\n      window.clearTimeout(this._timerId);\r\n      this._timerId = null;\r\n    }\r\n  }\r\n}\r\n","export const Serializer = {\r\n  serialize: JSON.stringify,\r\n  deserialize: JSON.parse\r\n};\r\n","const makeId = () => Date.now() + Math.random();\r\n\r\nexport class MessageQueue {\r\n  constructor () {\r\n    this._items = {};\r\n    this._handled = [];\r\n    this._failed = [];\r\n  }\r\n\r\n  add (resolver) {\r\n    const id = makeId();\r\n\r\n    this._items[id] = resolver;\r\n\r\n    return id;\r\n  }\r\n\r\n  acknowledge (id) {\r\n    const item = this._items[id];\r\n\r\n    if (item) {\r\n      clearTimeout(item.timerId);\r\n      item.resolve();\r\n      delete this._items[id];\r\n      this._handled.push(id);\r\n    }\r\n  }\r\n\r\n  fail (id, error) {\r\n    const item = this._items[id];\r\n\r\n    if (item) {\r\n      item.reject(error);\r\n      delete this._items[id];\r\n      this._failed.push(id);\r\n    }\r\n  }\r\n}\r\n","import { Serializer } from './Serializer';\r\nimport { MESSAGE_TYPES, DEFAULT_TIMEOUT } from './enums';\r\nimport { MessageQueue } from './MessageQueue';\r\n\r\n/**\r\n * The socket is the primary means a client communicates with a peer server.\r\n */\r\nexport class Socket {\n  /**\r\n     * Creates a socket instance.\r\n     * @param id - this instance's id. Used to locate it when message is received.\r\n     * @param target - the socket's communication target.\r\n     * @param peerId - The id of the peer socket.\r\n     * @param timeout - Max time to wait for an ack to any message.\r\n     */\r\n  constructor (id, target, peerId, timeout = DEFAULT_TIMEOUT) {\r\n    this.messages = new MessageQueue();\r\n\r\n    this.id = id;\r\n\r\n    this.peerId = peerId;\r\n\r\n    this.target = target;\r\n\r\n    this._timeout = timeout;\r\n\r\n    // For health monitoring - indicate the last time the peer checked in telling us it's alive\r\n    this.lastPeerCheckin = 0;\r\n\r\n    // Indicates whether the peer has started\r\n    this.isStarted = false;\r\n\r\n    // Disable the socket when its closed.\r\n    this._isClosed = false;\r\n  }\r\n\r\n  /**\r\n     * will send a message to the socket's peer\r\n     * @param message - message to send\r\n     * @param type - type of message to send. Defaults to \"DATA\"\r\n     */\r\n  send (message, type = MESSAGE_TYPES.DATA) {\r\n    if (this._isClosed) {\r\n      return Promise.reject(new Error('socket is closed.'));\r\n    }\r\n    if (type === MESSAGE_TYPES.START) {\r\n      this.isStarted = true;\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      // eslint-disable-next-line prefer-const\r\n      let packet;\r\n      const resolver = {\r\n        resolve,\r\n        reject,\r\n        timerId: window.setTimeout(() => {\r\n          this.messages.fail(packet.messageId, new Error('TIMEOUT'));\r\n        }, this._timeout)\r\n      };\r\n\r\n      packet = {\r\n        sourceId: this.id,\r\n        targetId: this.peerId,\r\n        messageId: this.messages.add(resolver),\r\n        message,\r\n        type\r\n      };\r\n\r\n      this._send(Serializer.serialize(packet));\r\n    });\r\n  }\r\n\r\n  /**\r\n     * Acknowledges a message.\r\n     * @param messageId message ID to ack.\r\n     */\r\n  ack (messageId) {\r\n    if (this._isClosed) {\r\n      return;\r\n    }\r\n\r\n    const packet = {\r\n      sourceId: this.id,\r\n      targetId: this.peerId,\r\n      messageId,\r\n      message: '',\r\n      type: MESSAGE_TYPES.ACK\r\n    };\r\n\r\n    this._send(Serializer.serialize(packet));\r\n  }\r\n\r\n  _send (message) {\r\n    this.target.postMessage(message, '*');\r\n  }\r\n\r\n  /**\r\n     * Closes the socket. Also triggers the \"onClose\" callback if supplied.\r\n     */\r\n  close () {\r\n    if (!this._isClosed) {\r\n      this.onClose();\r\n      this._isClosed = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Handles a deserialized packet from a peer.\r\n     * @param packet packet to handle\r\n     */\r\n  handle (packet) {\r\n    if (this._isClosed) {\r\n      return;\r\n    }\r\n\r\n    this.lastPeerCheckin = Date.now();\r\n\r\n    switch (packet.type) {\r\n      case MESSAGE_TYPES.START:\r\n        this.onStart();\r\n        this.isStarted = true;\r\n        break;\r\n      case MESSAGE_TYPES.ACK:\r\n        this.messages.acknowledge(packet.messageId);\r\n        break;\r\n      case MESSAGE_TYPES.HEARTBEAT:\r\n        break;\r\n      default:\r\n        this.onMessage(packet.message);\r\n    }\r\n\r\n    // Acknowledge all messages.\r\n    if (packet.type !== MESSAGE_TYPES.ACK) {\r\n      this.ack(packet.messageId);\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Stub method; intended to be overridden by the consumer. This method is called when the socket is closed.\r\n     */\r\n  onClose () {\r\n    // Stub handler, intended to be overridden.\r\n  }\r\n\r\n  /**\r\n     * Stub method; intended to be overridden by the consumer. This method is called when the socket receives a message\r\n     * from its peer.\r\n     */\r\n  onMessage () {\r\n    // Stub handler, intended to be overridden.\r\n  }\r\n\r\n  /**\r\n     * Stub method; intended to be overridden by the consumer. This method is called when the socket receives the first\r\n     * message from its peer, meaning the connection is officially active.\r\n     */\r\n  onStart () {\r\n    // Stub handler, intended to be overridden.\r\n  }\r\n}\r\n","import { Socket } from './Socket';\r\nimport { isIE } from './enums';\r\n\r\nexport class HostSocket extends Socket {\r\n  _send (message) {\r\n    if (isIE) {\r\n      this.target.toGuest(message);\r\n    } else {\r\n      super._send(message);\r\n    }\r\n  }\r\n}\r\n","import { HeartbeatMonitor } from './HeartbeatMonitor';\r\nimport { Serializer } from './Serializer';\r\nimport { HostSocket } from './HostSocket';\r\nimport { DEFAULT_TIMEOUT, isIE } from './enums';\r\n\r\nconst DEFAULT_GUEST_OPTIONS = {\r\n  windowOptions: 'left=0,top=0,height=900,width=800,status=yes,toolbar=no,menubar=no,location=yes',\r\n  timeout: DEFAULT_TIMEOUT\r\n};\r\n\r\nexport class Host {\r\n  constructor () {\r\n    this._sockets = [];\r\n    // Listen for postMessage events\r\n    if (isIE) {\r\n      window.fromGuest = this._onMessage.bind(this);\r\n    } else {\r\n      window.addEventListener('message', this._onMessage.bind(this), false);\r\n    }\r\n\r\n    // Create the health monitor\r\n    this._healthMonitor = new HeartbeatMonitor(this, this._sockets);\r\n  }\r\n\r\n  _onMessage (message) {\r\n    const packet = Serializer.deserialize(message.data);\r\n    const socket = this._sockets[packet.targetId];\r\n\r\n    // verify the socket reference\r\n    if (!socket) {\r\n      // probably what happened is the user refreshed the client page and the server's\r\n      // still sending messages. Not much we can do but ignore it. The server should clean\r\n      // itself up eventually.\r\n      return;\r\n    }\r\n\r\n    socket.handle(packet);\r\n  }\r\n\r\n  /**\r\n     * creates a guest session by opening a new window and passing that reference to a socket instance,\r\n     * then returns the socket\r\n     * @param options\r\n     * @returns {Socket}\r\n     */\r\n  create (\r\n    { target, windowOptions = DEFAULT_GUEST_OPTIONS.windowOptions, timeout = DEFAULT_GUEST_OPTIONS.timeout }\r\n    = DEFAULT_GUEST_OPTIONS) {\r\n    let pTarget = target;\r\n    // the socket id is simply the next available slot in the sockets array\r\n    const socketId = this._sockets.length;\r\n\r\n    // The 'endpoint' is the target window\r\n    if (isIE) {\r\n      const proxy = './ie-proxy.html';\r\n\r\n      pTarget = `${proxy}?guest=${pTarget}`;\r\n    }\r\n    const endpoint = window.open(pTarget, socketId.toString(), windowOptions);\r\n\r\n    // new up a socket and store it in our socket's array\r\n    const socket = new HostSocket(socketId, endpoint);\r\n\r\n    this._sockets.push(socket);\r\n\r\n    // ensure socket monitoring is active (it stops polling when all sockets are closed)\r\n    this._healthMonitor.start();\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const timerId = setTimeout(() => {\r\n        this.close(socket);\r\n        reject(new Error('TIMEOUT'));\r\n      }, timeout);\r\n\r\n      socket.onStart = () => {\r\n        clearTimeout(timerId);\r\n        resolve(socket);\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n     * Close the socket, which renders it pretty much useless.\r\n     * @param socket\r\n     */\r\n  close (socket) {\r\n    if (socket.target) {\r\n      socket.target.close();\r\n    }\r\n    socket.close();\r\n    this._sockets[socket.id] = null;\r\n  }\r\n\r\n  /**\r\n     * shuts down the host.\r\n     */\r\n  shutdown () {\r\n    for (let ix = 0; ix < this._sockets.length; ix++) {\r\n      this.close(this._sockets[ix]);\r\n    }\r\n    this._sockets.length = 0;\r\n  }\r\n}\r\n","import { DEFAULT_HEALTH_CHECK_INTERVAL, MESSAGE_TYPES } from './enums';\r\n\r\n/**\r\n * HeartbeatProvider; includes automatic heartbeat.\r\n */\r\nexport class HeartbeatProvider {\r\n  constructor (socket) {\r\n    this._socket = socket;\r\n  }\r\n\r\n  /**\r\n     * Signals that the socket is configured and can start reporting heartbeats.\r\n     */\r\n  start () {\r\n    this._socket.send('', MESSAGE_TYPES.START);\r\n    this._sendHeartbeat();\r\n  }\r\n\r\n  stop () {\r\n    window.clearTimeout(this._timerId);\r\n  }\r\n\r\n  _sendHeartbeat () {\r\n    this._socket.send('', MESSAGE_TYPES.HEARTBEAT).catch(() => this.onFail());\r\n\r\n    this._timerId = window.setTimeout(this._sendHeartbeat.bind(this), DEFAULT_HEALTH_CHECK_INTERVAL);\r\n  }\r\n\r\n  onFail () {\r\n    // Stub handler, intended to be overridden.\r\n  }\r\n}\r\n","import { Serializer } from './Serializer';\r\nimport { Socket } from './Socket';\r\nimport { HeartbeatProvider } from './HeartbeatProvider';\r\n\r\nconst DEFAULT_SERVER_SOCKET_ID = 0;\r\n\r\n/**\r\n * The \"Guest\" is launched by the host. Typically hosts control guests, but guests can send messages to the host as\r\n * well.\r\n */\r\nexport class Guest {\n  /**\r\n     * Signals that the guest has been configured and is ready to send / receive messages\r\n     */\r\n  start () {\r\n    this._socket = new Socket(DEFAULT_SERVER_SOCKET_ID, window.opener || window.top, parseInt(window.name, 10));\r\n\r\n    this._socket.onMessage = (...args) => {\r\n      this.onReceiveMessage && this.onReceiveMessage(...args);\r\n    };\r\n\r\n    window.addEventListener('message', this._onMessage.bind(this), false);\r\n\r\n    const heartbeat = new HeartbeatProvider(this._socket);\r\n\r\n    heartbeat.onFail = () => {\r\n      heartbeat.stop();\r\n      this.close();\r\n    };\r\n\r\n    // Setup an event to notify the client that we're ready to send messages\r\n    window.addEventListener('load', () => {\r\n      heartbeat.start();\r\n    }, false);\r\n  }\r\n\r\n  _onMessage (message) {\r\n    // On page reloads when the parent window is closed, postMessage sends to itself.\r\n    if (message.source === window) {\r\n      return;\r\n    }\r\n    const packet = Serializer.deserialize(message.data);\r\n\r\n    this._socket.handle(packet);\r\n  }\r\n\r\n  /**\r\n     * Sends a message to the host.\r\n     * @param message\r\n     */\r\n  sendMessage (message) {\r\n    this._socket.send(message);\r\n  }\r\n\r\n  /**\r\n     * Closes the guest window!\r\n     */\r\n  close () {\r\n    this.onClose();\r\n    window.close();\r\n  }\r\n\r\n  /**\r\n     * Lookup the Host's peer ID. Useful for debugging but not much else.\r\n     * @returns {*}\r\n     */\r\n  get id () {\r\n    return this._socket.peerId;\r\n  }\r\n\r\n  onClose () {\r\n    // Stub handler, intended to be overridden.\r\n  }\r\n}\r\n"],"names":["DEFAULT_HEALTH_CHECK_INTERVAL","DEFAULT_HEALTH_CHECK_TIMEOUT","DEFAULT_TIMEOUT","MESSAGE_TYPES","DATA","START","ACK","HEARTBEAT","isIE","window","ActiveXObject","HeartbeatMonitor","host","sockets","_lasthealthPoll","Date","now","_host","_sockets","_timerId","_monitor","hasActiveSockets","forEach","socket","isStarted","lastPeerCheckin","close","stop","setTimeout","bind","clearTimeout","Serializer","serialize","JSON","stringify","deserialize","parse","makeId","Math","random","MessageQueue","_items","_handled","_failed","resolver","id","item","timerId","resolve","push","error","reject","Socket","target","peerId","timeout","messages","_timeout","_isClosed","message","type","Promise","Error","packet","fail","messageId","sourceId","targetId","add","_send","postMessage","onClose","onStart","acknowledge","onMessage","ack","HostSocket","toGuest","DEFAULT_GUEST_OPTIONS","windowOptions","Host","fromGuest","_onMessage","addEventListener","_healthMonitor","data","handle","pTarget","socketId","length","proxy","endpoint","open","toString","start","ix","HeartbeatProvider","_socket","send","_sendHeartbeat","catch","onFail","DEFAULT_SERVER_SOCKET_ID","Guest","opener","top","parseInt","name","onReceiveMessage","heartbeat","source"],"mappings":"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"}