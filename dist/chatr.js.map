{"version":3,"file":"chatr.js","sources":["../src/util/Serializer.js","../src/enums.js","../src/util/SocketHealthMonitor.js","../src/socket/Socket.js","../src/socket/ServerSocket.js","../src/Host.js","../src/Guest.js"],"sourcesContent":["export class Serializer {\r\n\r\n    /**\r\n     * Turns a message into a packet containing information about the message's type and route.\r\n     * @param socket - Socket sending the message\r\n     * @param message - Message to send\r\n     * @param type - Type of message\r\n     */\r\n    static serialize (socket, message, type) {\r\n        return JSON.stringify({\r\n            type,\r\n            sourceId: socket.id,\r\n            targetId: socket.peerId,\r\n            payload: message,\r\n            length: message.length,\r\n            origin: window.document.domain\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Deserializes a received message.\r\n     * @param message\r\n     */\r\n    static deserialize (message) {\r\n        return JSON.parse(message.data);\r\n    }\r\n}\r\n","export const DEFAULT_HEALTH_CHECK_INTERVAL = 1000;\r\nexport const DEFAULT_HEALTH_CHECK_TIMEOUT = 5000;\r\n\r\n/**\r\n * Possible message types sent/recv'd by a socket\r\n * @type {{DATA: string, START: string, HEARTBEAT: string}}\r\n */\r\nexport const MESSAGE_TYPES = {\r\n    DATA: 'data',\r\n    START: 'start',\r\n    HEARTBEAT: 'heartbeat'\r\n};\r\n","import {DEFAULT_HEALTH_CHECK_INTERVAL, DEFAULT_HEALTH_CHECK_TIMEOUT} from '../enums';\r\n\r\nexport class SocketHealthMonitor {\r\n    constructor (host, sockets) {\r\n        this._lasthealthPoll = Date.now();\r\n        this._host = host;\r\n        this._sockets = sockets;\r\n        this._timerId = null;\r\n    }\r\n\r\n    /**\r\n     * starts monitoring the sockets array (if it's not already doing so)\r\n     */\r\n    start () {\r\n        if (!this._timerId) {\r\n            this._monitor();\r\n        }\r\n    }\r\n\r\n    _monitor () {\r\n        // indicates whether any active sockets were found. Used to optionally stop monitoring.\r\n        let hasActiveSockets = false;\r\n\r\n        // loop through the socket array and make sure everyone's playing nice.\r\n        this._sockets.forEach((socket) => {\r\n            if (!socket) {\r\n                return;\r\n            }\r\n\r\n            // Indicate that someone's alive\r\n            hasActiveSockets = true;\r\n\r\n            // Close any sockets who'se peers have disappeared into the ether.\r\n            if (socket.isStarted && this._lasthealthPoll - socket.lastPeerCheckin > DEFAULT_HEALTH_CHECK_TIMEOUT) {\r\n                this._host.close(socket);\r\n            }\r\n        });\r\n\r\n        // Update\r\n        this._lasthealthPoll = Date.now();\r\n\r\n        // If nobody's around, stop paying attention\r\n        if (!hasActiveSockets) {\r\n            this.stop();\r\n        }\r\n\r\n        this._timerId = window.setTimeout(this._monitor.bind(this), DEFAULT_HEALTH_CHECK_INTERVAL);\r\n    }\r\n\r\n    /**\r\n     * Stops monitoring the sockets array.\r\n     */\r\n    stop () {\r\n        if (this._timerId) {\r\n            window.clearTimeout(this._timerId);\r\n            this._timerId = null;\r\n        }\r\n    }\r\n}\r\n","import {Serializer} from '../util/index';\r\nimport {MESSAGE_TYPES} from '../enums';\r\n\r\n/**\r\n * The socket is the primary means a client communicates with a peer server.\r\n */\r\nexport class Socket {\r\n\r\n    /**\r\n     * Creates a socket instance.\r\n     * @param id - this instance's id. Used to locate it when message is received.\r\n     * @param target - the socket's communication target.\r\n     * @param peerId - The id of the peer socket.\r\n     */\r\n    constructor (id, target, peerId) {\r\n        this._serializer = Serializer;\r\n\r\n        this.id = id;\r\n\r\n        this.peerId = peerId;\r\n\r\n        this.target = target;\r\n\r\n        // For health monitoring - indicate the last time the peer checked in telling us it's alive\r\n        this.lastPeerCheckin = 0;\r\n\r\n        // Indicates whether the peer has started\r\n        this.isStarted = false;\r\n    }\r\n\r\n    /**\r\n     * will send a message to the socket's peer\r\n     * @param message - message to send\r\n     * @param type - type of message to send. Defaults to \"DATA\"\r\n     */\r\n    send (message, type = MESSAGE_TYPES.DATA) {\r\n        this.target.postMessage(this._serializer.serialize(this, message, type), '*');\r\n    }\r\n\r\n    /**\r\n     * Closes the socket. Also triggers the \"onClose\" callback if supplied.\r\n     */\r\n    close () {\r\n        this.onClose && this.onClose();\r\n    }\r\n\r\n    /**\r\n     * Handles a message from a peer.\r\n     * @param message message to handle\r\n     */\r\n    handle (message) {\r\n        this.lastPeerCheckin = Date.now();\r\n\r\n        switch (message.type) {\r\n            case MESSAGE_TYPES.START:\r\n                this.isStarted = true;\r\n                this.onStart && this.onStart();\r\n                break;\r\n            case MESSAGE_TYPES.HEARTBEAT:\r\n                break;\r\n            default:\r\n                this.onMessage && this.onMessage(message.payload);\r\n        }\r\n    }\r\n}\r\n","import {DEFAULT_HEALTH_CHECK_INTERVAL, MESSAGE_TYPES} from '../enums';\r\nimport {Socket} from './Socket';\r\n\r\nconst DEFAULT_SERVER_SOCKET_ID = 0;\r\n\r\n/**\r\n * Server-side socket; includes automatic heartbeat.\r\n */\r\nexport class ServerSocket extends Socket {\r\n    constructor () {\r\n        super(DEFAULT_SERVER_SOCKET_ID, window.opener || window.top, parseInt(window.name, 10));\r\n    }\r\n\r\n    /**\r\n     * Signals that the socket is configured and can start reporting heartbeats.\r\n     */\r\n    start () {\r\n        this.send('', MESSAGE_TYPES.START);\r\n        this._sendHeartbeat();\r\n    }\r\n\r\n    _sendHeartbeat () {\r\n        this.send('', MESSAGE_TYPES.HEARTBEAT);\r\n\r\n        window.setTimeout(this._sendHeartbeat.bind(this), DEFAULT_HEALTH_CHECK_INTERVAL);\r\n    }\r\n}\r\n","import {Serializer, SocketHealthMonitor} from './util/index';\r\nimport {Socket} from './socket/index';\r\n\r\nexport class Host {\r\n    constructor () {\r\n        this._sockets = [];\r\n        this._serializer = Serializer;\r\n    }\r\n\r\n    /**\r\n     * Signal that the host has been configured and is ready to start creating guests.\r\n     */\r\n    start () {\r\n        // Listen for postMessage events\r\n        window.addEventListener('message', this._onMessage.bind(this), false);\r\n\r\n        // Create the health monitor\r\n        this._healthMonitor = new SocketHealthMonitor(this, this._sockets);\r\n    }\r\n\r\n    _onMessage (message) {\r\n        const packet = this._serializer.deserialize(message);\r\n        const socket = this._sockets[packet.targetId];\r\n\r\n        // verify the socket reference\r\n        if (!socket) {\r\n            // probably what happened is the user refreshed the client page and the server's\r\n            // still sending messages. Not much we can do but ignore it. The server should clean\r\n            // itself up eventually.\r\n            return;\r\n        }\r\n\r\n        socket.handle(packet);\r\n    }\r\n\r\n    /**\r\n     * creates a guest session by opening a new window and passing that reference to a socket instance,\r\n     * then returns the socket\r\n     * @param options\r\n     * @returns {Socket}\r\n     */\r\n    create (options) {\r\n        // the socket id is simply the next available slot in the sockets array\r\n        const socketId = this._sockets.length;\r\n\r\n        // The 'endpoint' is the target window\r\n        const endpoint = window.open(options.target, socketId.toString(), options.windowOptions);\r\n\r\n        // new up a socket and store it in our socket's array\r\n        const socket = new Socket(socketId, endpoint);\r\n\r\n        this._sockets.push(socket);\r\n\r\n        // ensure socket monitoring is active\r\n        this._healthMonitor.start();\r\n\r\n        // give the people what they ask for\r\n        return socket;\r\n    }\r\n\r\n    /**\r\n     * Close the socket, which renders it pretty much useless.\r\n     * @param socket\r\n     */\r\n    close (socket) {\r\n        if (socket.target) {\r\n            socket.target.close();\r\n        }\r\n        socket.close();\r\n        this._sockets[socket.id] = null;\r\n    }\r\n\r\n    /**\r\n     * shuts down the host.\r\n     */\r\n    shutdown () {\r\n        for (let ix = 0; ix < this._sockets.length; ix++) {\r\n            this.close(this._sockets[ix]);\r\n        }\r\n        this._sockets.length = 0;\r\n    }\r\n}\r\n","import {Serializer} from './util/index';\r\nimport {ServerSocket} from './socket/index';\r\n\r\n/**\r\n * The \"Guest\" is launched by the host. Typically hosts control guests, but guests can send messages to the host as\r\n * well.\r\n */\r\nexport class Guest {\r\n    constructor () {\r\n        this._serializer = Serializer;\r\n    }\r\n\r\n    /**\r\n     * Signals that the guest has been configured and is ready to send / receive messages\r\n     */\r\n    start () {\r\n        this._server = new ServerSocket();\r\n\r\n        this._server.onMessage = (...args) => {\r\n            this.onReceiveMessage && this.onReceiveMessage(...args);\r\n        };\r\n\r\n        window.addEventListener('message', this._onMessage.bind(this), false);\r\n\r\n        // Setup an event to notify the client that we're ready to send messages\r\n        window.addEventListener('load', () => {\r\n            this._server.start();\r\n        }, false);\r\n    }\r\n\r\n    _onMessage (message) {\r\n        const packet = this._serializer.deserialize(message);\r\n\r\n        this._server.handle(packet);\r\n    }\r\n\r\n    /**\r\n     * Sends a message to the host.\r\n     * @param message\r\n     */\r\n    sendMessage (message) {\r\n        this._server.send(message);\r\n    }\r\n\r\n    /**\r\n     * Lookup the Host's peer ID. Useful for debugging but not much else.\r\n     * @returns {*}\r\n     */\r\n    get id () {\r\n        return this._server.peerId;\r\n    }\r\n}\r\n"],"names":["Serializer","socket","message","type","JSON","stringify","id","peerId","length","window","document","domain","parse","data","DEFAULT_HEALTH_CHECK_INTERVAL","DEFAULT_HEALTH_CHECK_TIMEOUT","MESSAGE_TYPES","SocketHealthMonitor","host","sockets","_lasthealthPoll","Date","now","_host","_sockets","_timerId","_monitor","hasActiveSockets","forEach","isStarted","lastPeerCheckin","close","stop","setTimeout","bind","clearTimeout","Socket","target","_serializer","DATA","postMessage","serialize","onClose","START","onStart","HEARTBEAT","onMessage","payload","DEFAULT_SERVER_SOCKET_ID","ServerSocket","opener","top","parseInt","name","send","_sendHeartbeat","Host","addEventListener","_onMessage","_healthMonitor","packet","deserialize","targetId","handle","options","socketId","endpoint","open","toString","windowOptions","push","start","ix","Guest","_server","onReceiveMessage"],"mappings":"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"}