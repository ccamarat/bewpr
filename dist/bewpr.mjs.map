{"version":3,"file":"bewpr.mjs","sources":["../src/enums.js","../src/HeartbeatMonitor.js","../src/Serializer.js","../src/MessageQueue.js","../src/Socket.js","../src/HostSocket.js","../src/Host.js","../src/HeartbeatProvider.js","../src/Guest.js"],"sourcesContent":["export const DEFAULT_HEALTH_CHECK_INTERVAL = 1000;\r\nexport const DEFAULT_HEALTH_CHECK_TIMEOUT = 5000;\r\nexport const DEFAULT_TIMEOUT = 5000;\r\n\r\n/**\r\n * Possible message types sent/recv'd by a socket\r\n * @type {{DATA: string, START: string, HEARTBEAT: string}}\r\n */\r\nexport const MESSAGE_TYPES = {\r\n    DATA: 'data',\r\n    START: 'start',\r\n    ACK: 'ack',\r\n    HEARTBEAT: 'heartbeat'\r\n};\r\n\r\nexport const isIE = window.ActiveXObject || 'ActiveXObject' in window;\r\n","import {DEFAULT_HEALTH_CHECK_INTERVAL, DEFAULT_HEALTH_CHECK_TIMEOUT} from './enums';\r\n\r\nexport class HeartbeatMonitor {\r\n    constructor (host, sockets) {\r\n        this._lasthealthPoll = Date.now();\r\n        this._host = host;\r\n        this._sockets = sockets;\r\n        this._timerId = null;\r\n    }\r\n\r\n    /**\r\n     * starts monitoring the sockets array (if it's not already doing so)\r\n     */\r\n    start () {\r\n        if (!this._timerId) {\r\n            this._monitor();\r\n        }\r\n    }\r\n\r\n    _monitor () {\r\n        // indicates whether any active sockets were found. Used to optionally stop monitoring.\r\n        let hasActiveSockets = false;\r\n\r\n        // loop through the socket array and make sure everyone's playing nice.\r\n        this._sockets.forEach((socket) => {\r\n            if (!socket) {\r\n                return;\r\n            }\r\n\r\n            // Indicate that someone's alive\r\n            hasActiveSockets = true;\r\n\r\n            // Close any sockets who'se peers have disappeared into the ether.\r\n            if (socket.isStarted && this._lasthealthPoll - socket.lastPeerCheckin > DEFAULT_HEALTH_CHECK_TIMEOUT) {\r\n                this._host.close(socket);\r\n            }\r\n        });\r\n\r\n        // Update\r\n        this._lasthealthPoll = Date.now();\r\n\r\n        // If nobody's around, stop paying attention\r\n        if (!hasActiveSockets) {\r\n            this.stop();\r\n        }\r\n\r\n        this._timerId = window.setTimeout(this._monitor.bind(this), DEFAULT_HEALTH_CHECK_INTERVAL);\r\n    }\r\n\r\n    /**\r\n     * Stops monitoring the sockets array.\r\n     */\r\n    stop () {\r\n        if (this._timerId) {\r\n            window.clearTimeout(this._timerId);\r\n            this._timerId = null;\r\n        }\r\n    }\r\n}\r\n","export const Serializer = {\r\n    serialize: JSON.stringify,\r\n    deserialize: JSON.parse\r\n};\r\n","const makeId = () => Date.now() + Math.random();\r\n\r\nexport class MessageQueue {\r\n  constructor () {\r\n    this._items = {};\r\n    this._handled = [];\r\n    this._failed = [];\r\n  }\r\n\r\n  add (resolver) {\r\n    const id = makeId();\r\n\r\n    this._items[id] = resolver;\r\n\r\n    return id;\r\n  }\r\n\r\n  acknowledge (id) {\r\n    const item = this._items[id];\r\n\r\n    if (item) {\r\n      clearTimeout(item.timerId);\r\n      item.resolve();\r\n      delete this._items[id];\r\n      this._handled.push(id);\r\n    }\r\n  }\r\n\r\n  fail (id, error) {\r\n    const item = this._items[id];\r\n\r\n    if (item) {\r\n      item.reject(error);\r\n      delete this._items[id];\r\n      this._failed.push(id);\r\n    }\r\n  }\r\n}\r\n","import {Serializer} from './Serializer';\r\nimport {MESSAGE_TYPES, DEFAULT_TIMEOUT} from './enums';\r\nimport {MessageQueue} from './MessageQueue';\r\n\r\n/**\r\n * The socket is the primary means a client communicates with a peer server.\r\n */\r\nexport class Socket {\r\n\r\n    /**\r\n     * Creates a socket instance.\r\n     * @param id - this instance's id. Used to locate it when message is received.\r\n     * @param target - the socket's communication target.\r\n     * @param peerId - The id of the peer socket.\r\n     * @param timeout - Max time to wait for an ack to any message.\r\n     */\r\n    constructor(id, target, peerId, timeout = DEFAULT_TIMEOUT) {\r\n        this.messages = new MessageQueue();\r\n\r\n        this.id = id;\r\n\r\n        this.peerId = peerId;\r\n\r\n        this.target = target;\r\n\r\n        this._timeout = timeout;\r\n\r\n        // For health monitoring - indicate the last time the peer checked in telling us it's alive\r\n        this.lastPeerCheckin = 0;\r\n\r\n        // Indicates whether the peer has started\r\n        this.isStarted = false;\r\n\r\n        // Disable the socket when its closed.\r\n        this._isClosed = false;\r\n    }\r\n\r\n    /**\r\n     * will send a message to the socket's peer\r\n     * @param message - message to send\r\n     * @param type - type of message to send. Defaults to \"DATA\"\r\n     */\r\n    send(message, type = MESSAGE_TYPES.DATA) {\r\n        if (this._isClosed) {\r\n            return Promise.reject(new Error('socket is closed.'));\r\n        }\r\n        if (type === MESSAGE_TYPES.START) {\r\n            this.isStarted = true;\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            // eslint-disable-next-line prefer-const\r\n            let packet;\r\n            const resolver = {\r\n                resolve,\r\n                reject,\r\n                timerId: window.setTimeout(() => {\r\n                    this.messages.fail(packet.messageId, new Error('TIMEOUT'));\r\n                }, this._timeout)\r\n            };\r\n\r\n            packet = {\r\n                sourceId: this.id,\r\n                targetId: this.peerId,\r\n                messageId: this.messages.add(resolver),\r\n                message,\r\n                type\r\n            };\r\n\r\n            this._send(Serializer.serialize(packet));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Acknowledges a message.\r\n     * @param messageId message ID to ack.\r\n     */\r\n    ack(messageId) {\r\n        if (this._isClosed) {\r\n            return;\r\n        }\r\n\r\n        const packet = {\r\n            sourceId: this.id,\r\n            targetId: this.peerId,\r\n            messageId,\r\n            message: '',\r\n            type: MESSAGE_TYPES.ACK\r\n        };\r\n\r\n        this._send(Serializer.serialize(packet));\r\n    }\r\n\r\n    _send(message) {\r\n        this.target.postMessage(message, '*');\r\n    }\r\n\r\n    /**\r\n     * Closes the socket. Also triggers the \"onClose\" callback if supplied.\r\n     */\r\n    close() {\r\n        if (!this._isClosed) {\r\n            this.onClose();\r\n            this._isClosed = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a deserialized packet from a peer.\r\n     * @param packet packet to handle\r\n     */\r\n    handle(packet) {\r\n        if (this._isClosed) {\r\n            return;\r\n        }\r\n\r\n        this.lastPeerCheckin = Date.now();\r\n\r\n        switch (packet.type) {\r\n            case MESSAGE_TYPES.START:\r\n                this.onStart();\r\n                this.isStarted = true;\r\n                break;\r\n            case MESSAGE_TYPES.ACK:\r\n                this.messages.acknowledge(packet.messageId);\r\n                break;\r\n            case MESSAGE_TYPES.HEARTBEAT:\r\n                break;\r\n            default:\r\n                this.onMessage(packet.message);\r\n        }\r\n\r\n        // Acknowledge all messages.\r\n        if (packet.type !== MESSAGE_TYPES.ACK) {\r\n            this.ack(packet.messageId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stub method; intended to be overridden by the consumer. This method is called when the socket is closed.\r\n     */\r\n    onClose () {\r\n        // Stub handler, intended to be overridden.\r\n    }\r\n\r\n    /**\r\n     * Stub method; intended to be overridden by the consumer. This method is called when the socket receives a message\r\n     * from its peer.\r\n     */\r\n    onMessage () {\r\n        // Stub handler, intended to be overridden.\r\n    }\r\n\r\n    /**\r\n     * Stub method; intended to be overridden by the consumer. This method is called when the socket receives the first\r\n     * message from its peer, meaning the connection is officially active.\r\n     */\r\n    onStart () {\r\n        // Stub handler, intended to be overridden.\r\n    }\r\n}\r\n","import {Socket} from './Socket';\r\nimport {isIE} from './enums';\r\n\r\nexport class HostSocket extends Socket {\r\n    _send (message) {\r\n        if (isIE) {\r\n            this.target.toGuest(message);\r\n        } else {\r\n            super._send(message);\r\n        }\r\n    }\r\n}\r\n","import {HeartbeatMonitor} from './HeartbeatMonitor';\r\nimport {Serializer} from './Serializer';\r\nimport {HostSocket} from './HostSocket';\r\nimport {DEFAULT_TIMEOUT, isIE} from './enums';\r\n\r\nconst DEFAULT_GUEST_OPTIONS = {\r\n    windowOptions: 'left=0,top=0,height=900,width=800,status=yes,toolbar=no,menubar=no,location=yes',\r\n    timeout: DEFAULT_TIMEOUT\r\n};\r\n\r\nexport class Host {\r\n    constructor() {\r\n        this._sockets = [];\r\n        // Listen for postMessage events\r\n        if (isIE) {\r\n            window.fromGuest = this._onMessage.bind(this);\r\n        } else {\r\n            window.addEventListener('message', this._onMessage.bind(this), false);\r\n        }\r\n\r\n        // Create the health monitor\r\n        this._healthMonitor = new HeartbeatMonitor(this, this._sockets);\r\n    }\r\n\r\n    _onMessage(message) {\r\n        const packet = Serializer.deserialize(message.data);\r\n        const socket = this._sockets[packet.targetId];\r\n\r\n        // verify the socket reference\r\n        if (!socket) {\r\n            // probably what happened is the user refreshed the client page and the server's\r\n            // still sending messages. Not much we can do but ignore it. The server should clean\r\n            // itself up eventually.\r\n            return;\r\n        }\r\n\r\n        socket.handle(packet);\r\n    }\r\n\r\n    /**\r\n     * creates a guest session by opening a new window and passing that reference to a socket instance,\r\n     * then returns the socket\r\n     * @param options\r\n     * @returns {Socket}\r\n     */\r\n    create (\r\n      {target, windowOptions = DEFAULT_GUEST_OPTIONS.windowOptions, timeout = DEFAULT_GUEST_OPTIONS.timeout}\r\n      = DEFAULT_GUEST_OPTIONS) {\r\n        let pTarget = target;\r\n        // the socket id is simply the next available slot in the sockets array\r\n        const socketId = this._sockets.length;\r\n\r\n        // The 'endpoint' is the target window\r\n        if (isIE) {\r\n            const proxy = './ie-proxy.html';\r\n\r\n            pTarget = `${proxy}?guest=${pTarget}`;\r\n        }\r\n        const endpoint = window.open(pTarget, socketId.toString(), windowOptions);\r\n\r\n        // new up a socket and store it in our socket's array\r\n        const socket = new HostSocket(socketId, endpoint);\r\n\r\n        this._sockets.push(socket);\r\n\r\n        // ensure socket monitoring is active (it stops polling when all sockets are closed)\r\n        this._healthMonitor.start();\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const timerId = setTimeout(() => {\r\n                this.close(socket);\r\n                reject(new Error('TIMEOUT'));\r\n            }, timeout);\r\n\r\n            socket.onStart = () => {\r\n                clearTimeout(timerId);\r\n                resolve(socket);\r\n            };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Close the socket, which renders it pretty much useless.\r\n     * @param socket\r\n     */\r\n    close(socket) {\r\n        if (socket.target) {\r\n            socket.target.close();\r\n        }\r\n        socket.close();\r\n        this._sockets[socket.id] = null;\r\n    }\r\n\r\n    /**\r\n     * shuts down the host.\r\n     */\r\n    shutdown() {\r\n        for (let ix = 0; ix < this._sockets.length; ix++) {\r\n            this.close(this._sockets[ix]);\r\n        }\r\n        this._sockets.length = 0;\r\n    }\r\n}\r\n","import {DEFAULT_HEALTH_CHECK_INTERVAL, MESSAGE_TYPES} from './enums';\r\n\r\n/**\r\n * HeartbeatProvider; includes automatic heartbeat.\r\n */\r\nexport class HeartbeatProvider {\r\n    constructor(socket) {\r\n        this._socket = socket;\r\n    }\r\n\r\n    /**\r\n     * Signals that the socket is configured and can start reporting heartbeats.\r\n     */\r\n    start() {\r\n        this._socket.send('', MESSAGE_TYPES.START);\r\n        this._sendHeartbeat();\r\n    }\r\n\r\n    stop () {\r\n        window.clearTimeout(this._timerId);\r\n    }\r\n\r\n    _sendHeartbeat() {\r\n        this._socket.send('', MESSAGE_TYPES.HEARTBEAT).catch(() => this.onFail());\r\n\r\n        this._timerId = window.setTimeout(this._sendHeartbeat.bind(this), DEFAULT_HEALTH_CHECK_INTERVAL);\r\n    }\r\n\r\n    onFail() {\r\n        // Stub handler, intended to be overridden.\r\n    }\r\n}\r\n","import {Serializer} from './Serializer';\r\nimport {Socket} from './Socket';\r\nimport {HeartbeatProvider} from './HeartbeatProvider';\r\n\r\nconst DEFAULT_SERVER_SOCKET_ID = 0;\r\n\r\n/**\r\n * The \"Guest\" is launched by the host. Typically hosts control guests, but guests can send messages to the host as\r\n * well.\r\n */\r\nexport class Guest {\r\n\r\n    /**\r\n     * Signals that the guest has been configured and is ready to send / receive messages\r\n     */\r\n    start () {\r\n        this._socket = new Socket(DEFAULT_SERVER_SOCKET_ID, window.opener || window.top, parseInt(window.name, 10));\r\n\r\n        this._socket.onMessage = (...args) => {\r\n            this.onReceiveMessage && this.onReceiveMessage(...args);\r\n        };\r\n\r\n        window.addEventListener('message', this._onMessage.bind(this), false);\r\n\r\n        const heartbeat = new HeartbeatProvider(this._socket);\r\n\r\n        heartbeat.onFail = () => {\r\n            heartbeat.stop();\r\n            this.close();\r\n        };\r\n\r\n        // Setup an event to notify the client that we're ready to send messages\r\n        window.addEventListener('load', () => {\r\n            heartbeat.start();\r\n        }, false);\r\n    }\r\n\r\n    _onMessage (message) {\r\n        // On page reloads when the parent window is closed, postMessage sends to itself.\r\n        if (message.source === window) {\r\n            return;\r\n        }\r\n        const packet = Serializer.deserialize(message.data);\r\n\r\n        this._socket.handle(packet);\r\n    }\r\n\r\n    /**\r\n     * Sends a message to the host.\r\n     * @param message\r\n     */\r\n    sendMessage (message) {\r\n        this._socket.send(message);\r\n    }\r\n\r\n    /**\r\n     * Closes the guest window!\r\n     */\r\n    close () {\r\n        this.onClose();\r\n        window.close();\r\n    }\r\n\r\n    /**\r\n     * Lookup the Host's peer ID. Useful for debugging but not much else.\r\n     * @returns {*}\r\n     */\r\n    get id () {\r\n        return this._socket.peerId;\r\n    }\r\n\r\n    onClose() {\r\n        // Stub handler, intended to be overridden.\r\n    }\r\n}\r\n"],"names":["DEFAULT_HEALTH_CHECK_INTERVAL","DEFAULT_HEALTH_CHECK_TIMEOUT","DEFAULT_TIMEOUT","MESSAGE_TYPES","isIE","window","ActiveXObject","HeartbeatMonitor","host","sockets","_lasthealthPoll","Date","now","_host","_sockets","_timerId","_monitor","hasActiveSockets","forEach","socket","isStarted","lastPeerCheckin","close","stop","setTimeout","bind","clearTimeout","Serializer","JSON","stringify","parse","makeId","Math","random","MessageQueue","_items","_handled","_failed","resolver","id","item","timerId","resolve","push","error","reject","Socket","target","peerId","timeout","messages","_timeout","_isClosed","message","type","DATA","Promise","Error","START","packet","fail","messageId","add","_send","serialize","ACK","postMessage","onClose","onStart","acknowledge","HEARTBEAT","onMessage","ack","HostSocket","toGuest","DEFAULT_GUEST_OPTIONS","Host","fromGuest","_onMessage","addEventListener","_healthMonitor","deserialize","data","targetId","handle","windowOptions","pTarget","socketId","length","proxy","endpoint","open","toString","start","ix","HeartbeatProvider","_socket","send","_sendHeartbeat","catch","onFail","DEFAULT_SERVER_SOCKET_ID","Guest","opener","top","parseInt","name","onReceiveMessage","heartbeat","source"],"mappings":"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"}